// ignore_for_file: camel_case_types
// i write my classes like java classes, deal with it
import 'package:flutter/material.dart';
import 'dart:core';
import 'dart:math';

Color? randomColour1 = Colors.transparent;

Color? randomColour4 = Colors.transparent;
Color? randomColour5 = Colors.transparent;
Color? randomColour6 = Colors.transparent;

List buttonColours = [];

final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

void main() {
  runApp(const GameChoices());
}

/*          onPressed: () {
            Navigator.of(context).push(_createRoute());
          }, */

class GameChoices extends StatelessWidget {
  const GameChoices({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(home: HomeScreen());
  }
}

class HomeScreen extends StatelessWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.of(context).push(_createRoute());
          },
          child: const Text('Colour Reflexes'),
        ),
      ),
    );
  }
}

Route _createRoute() {
  return PageRouteBuilder(
    transitionDuration: const Duration(milliseconds: 2000),
    pageBuilder: (context, animation, secondaryAnimation) =>
        const colourReflexes(),
    transitionsBuilder: (context, animation, secondaryAnimation, child) {
      const begin = Offset(0.0, 1.0);
      const end = Offset.zero;
      const curve = Curves.bounceIn;

      var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));

      return SlideTransition(
        position: animation.drive(tween),
        child: child,
      );
    },
  );
}

class colourReflexes extends StatefulWidget {
  const colourReflexes({Key? key}) : super(key: key);

  @override
  _colourReflexesState createState() => _colourReflexesState();
}

class _colourReflexesState extends State<colourReflexes> {
  late double deviceWidth;
  late double deviceHeight;
  // Variables that might be affected

  List<Color?> colorList = [
    Colors.yellow,
    Colors.teal,
    Colors.red,
    Colors.purple,
    Colors.pink,
    Colors.orange,
    Colors.lime,
    Colors.lightGreen,
    Colors.lightBlue[200],
    Colors.indigo,
    Colors.grey,
    Colors.green,
    Colors.deepPurple,
    Colors.deepOrange,
    Colors.brown,
    Colors.blueGrey,
    Colors.blue,
    Colors.amber,
    Colors.black,
  ];

  Random random = Random();

  // Function to execute
  void _newColour() {
    setState(() {
      buttonColours.clear();

      randomColour1 = colorList[random.nextInt(colorList.length)];
      randomColour4 = colorList[random.nextInt(colorList.length)];
      randomColour5 = colorList[random.nextInt(colorList.length)];
      randomColour6 = colorList[random.nextInt(colorList.length)];

      while (randomColour1 == randomColour4) {
        randomColour4 = colorList[random.nextInt(colorList.length)];
      }
      while (randomColour1 == randomColour5) {
        randomColour5 = colorList[random.nextInt(colorList.length)];
      }
      while (randomColour1 == randomColour6) {
        randomColour6 = colorList[random.nextInt(colorList.length)];
      }
      while (randomColour4 == randomColour5) {
        randomColour5 = colorList[random.nextInt(colorList.length)];
      }
      while (randomColour4 == randomColour6) {
        randomColour6 = colorList[random.nextInt(colorList.length)];
      }
      while (randomColour5 == randomColour6) {
        randomColour6 = colorList[random.nextInt(colorList.length)];
      }

      if (randomColour1 != randomColour4 &&
          randomColour4 != randomColour5 &&
          randomColour5 != randomColour6) {
        buttonColours.add(randomColour1);
        buttonColours.add(randomColour4);
        buttonColours.add(randomColour5);
        buttonColours.add(randomColour6);
      }

      // ignore: avoid_print
    });
  }

  int randomButton = Random().nextInt(3);

  @override
  Widget build(BuildContext context) {
    randomButton = Random().nextInt(3);
    if (randomColour1 == randomColour4 ||
        randomColour1 == randomColour5 ||
        randomColour1 == randomColour6) {
      _newColour();
    }
    // ignore: avoid_print
    print("Correct button is : " + randomButton.toString());
    return MaterialApp(
      home: Scaffold(
        key: _scaffoldKey,
        appBar: AppBar(
          title: const Text('Colour Reflexes'),
          backgroundColor: Colors.blue[700],
        ),
        // ignore: prefer_const_constructors
        extendBodyBehindAppBar: true,
        // ignore: avoid_unnecessary_containers
        body: Container(
          // ignore: prefer_const_constructors
          child: _colourBox(),
        ),
        floatingActionButton: Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: <Widget>[
            FloatingActionButton(
              heroTag: 'bitch',
              onPressed: () {
                if (randomButton == 0) {
                  correctAnswer(context);
                  _newColour();
                } else {
                  wrongAnswer(context);
                }
                // Find the ScaffoldMessenger in the widget tree
                // and use it to show a SnackBar.
              },
              backgroundColor:
                  randomButton == 0 ? buttonColours[0] : buttonColours[1],
              child: const Icon(Icons.add),
            ), //button first

            FloatingActionButton(
              heroTag: 'asshole',
              onPressed: () {
                if (randomButton == 1) {
                  correctAnswer(context);
                  _newColour();
                } else {
                  wrongAnswer(context);
                }
              },
              backgroundColor:
                  randomButton == 1 ? buttonColours[0] : buttonColours[2],
              child: const Icon(Icons.add),
            ), // button second

            FloatingActionButton(
              heroTag: 'colourblind',
              onPressed: () {
                if (randomButton == 2) {
                  correctAnswer(context);
                  _newColour();
                } else {
                  wrongAnswer(context);
                }
              },
              backgroundColor:
                  randomButton == 2 ? buttonColours[0] : buttonColours[3],
              child: const Icon(Icons.add),
            ),
          ],
        ),
        floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      ),
    );
  }
}

class _colourBox extends StatelessWidget {
  const _colourBox({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: Container(
            color: buttonColours[0],
            alignment: Alignment.center,
          ),
        )
      ],
      crossAxisAlignment: CrossAxisAlignment.stretch,
      mainAxisAlignment: MainAxisAlignment.start,
    );
  }
}

void correctAnswer(BuildContext context) {
  double deviceHeight = MediaQuery.of(context).size.height;
  // ignore: deprecated_member_use
  _scaffoldKey.currentState!.hideCurrentSnackBar();
  // ignore: deprecated_member_use
  _scaffoldKey.currentState!.showSnackBar(SnackBar(
    elevation: deviceHeight / 2,
    duration: const Duration(milliseconds: 1069),
    content: const Text('Right Answer'),
  ));
}

void wrongAnswer(BuildContext context) {
  double deviceHeight = MediaQuery.of(context).size.height;
  // ignore: deprecated_member_use
  _scaffoldKey.currentState!.hideCurrentSnackBar();
  // ignore: deprecated_member_use
  _scaffoldKey.currentState!.showSnackBar(SnackBar(
    duration: const Duration(milliseconds: 1069),
    elevation: deviceHeight / 2,
    content: const Text('Wrong Answer'),
  ));
}
